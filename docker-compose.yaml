name: e-commerce
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    platform: linux/amd64
    container_name: zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports: ["2181:2181"]
    networks: [private_network]

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    platform: linux/amd64
    container_name: kafka
    restart: unless-stopped
    depends_on: [zookeeper]
    ports:
      - "9092:9092"   # internal
      - "9093:9093"   # external
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,EXTERNAL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    networks: [private_network]

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.2
    platform: linux/amd64
    container_name: elasticsearch
    restart: unless-stopped
    environment:
      discovery.type: single-node
      xpack.security.enabled: "false"
      ES_JAVA_OPTS: -Xms512m -Xmx512m
    ports: ["9200:9200","9300:9300"]
    networks: [private_network]

  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.2
    platform: linux/amd64
    container_name: kibana
    restart: unless-stopped
    depends_on: [elasticsearch]
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      XPACK_SECURITY_ENABLED: "false"
    ports: ["5601:5601"]
    networks: [private_network]

  authentication-service:
    container_name: authentication-service
    build: { context: authentication-service/. }
    ports: ["8081:8081"]
    networks: [private_network]

  order-service:
    container_name: order-service
    build: { context: order-service/. }
    ports: ["8082:8082"]
    networks: [private_network]

  product-service:
    container_name: product-service
    build: { context: product-service/. }
    ports: ["8083:8083"]
    networks: [private_network]

  api-gateway:
    container_name: api-gateway
    build: { context: api-gateway/. }
    ports: ["8080:8080"]
    networks: [private_network]

networks:
  private_network:
    driver: bridge
